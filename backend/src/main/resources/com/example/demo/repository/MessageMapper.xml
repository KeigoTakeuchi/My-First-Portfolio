<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.MessageMapper">

	<resultMap id="baseMessageResultMap" type="com.example.demo.entity.Message">
		<id property="id" column="id"/>
		<result property="title" column="title"/>
		<result property="content" column="content"/>
		<result property="createdAt" column="created_at"/>
		<result property="updatedAt" column="updated_at"/>
	</resultMap>
	
	<resultMap id="messageWithAccountResultMap" extends="baseMessageResultMap" type="com.example.demo.entity.Message">
		<association property="account" javaType="com.example.demo.entity.Account">
			<id column="account_id" property="id"/>
			<result column="account_name" property="name"/>
			<result column="hashed_password" property="hashedPassword" />
			<result column="display_name" property="displayName"/>
			<result column="authority" property="authority" javaType="com.example.demo.entity.Role"/>
			<result column="account_created_at" property="createdAt"/>
			<result column="account_updated_at" property="updatedAt"/>
		</association>
	</resultMap>
	
	<resultMap id="messageWithAllDetailsResultMap" extends="messageWithAccountResultMap" type="com.example.demo.entity.Message">
		<collection property="images" ofType="com.example.demo.entity.Image">
			<id column="image_id" property="id"/>
			<result column="image_name" property="name"/>
			<result column="image_file_path" property="filePath"/>
		</collection>
	</resultMap>
	
	<select id="getMessageById" resultMap="messageWithAllDetailsResultMap">
		SELECT 
		<!--Message-->
		 m.id ,
		 m.title ,
		 m.content ,
		 m.created_at ,
		 m.updated_at ,
		 <!--Account-->
		 a.id AS account_id,
		 a.name AS account_name,
		 a.display_name AS display_name,
		 a.authority,
		 a.created_at AS account_created_at,
		 a.updated_at AS account_updated_at,
		 <!-- Image-->
		 i.id AS image_id,
		 i.name AS image_name,
		 i.file_path AS image_file_path
		 <!--結合条件など -->
		FROM messages AS m
		JOIN accounts AS a ON m.account_id = a.id
		LEFT JOIN images AS i ON i.message_id = m.id
		WHERE m.id = #{id}
	</select>
	<select id="getAllMessagesByAccountId" resultMap="messageWithAccountResultMap">
		SELECT
		 <!--Message-->
		 m.id ,
		 m.title ,
		 m.content ,
		 m.created_at ,
		 m.updated_at ,
		 <!--Account-->
		 a.id AS account_id,
		 a.name AS account_name,
		 a.display_name AS display_name,
		 a.authority,
		 a.created_at AS account_created_at,
		 a.updated_at AS account_updated_at
		FROM messages AS m
		JOIN accounts AS a ON m.account_id = a.id
		WHERE m.account_id = #{id} 
	</select>
	<select id="getMessagesByWord" resultMap="messageWithAccountResultMap">
		SELECT 
		<!--message -->
		 m.id,
		 m.title,
		 m.content,
		 m.created_at,
		 m.updated_at,
		 <!--account -->
		 a.id AS account_id,
		 a.name AS account_name,
		 a.display_name AS display_name,
		 a.authority,
		 a.created_at AS account_created_at,
		 a.updated_at AS account_updated_at
		FROM messages AS m
		JOIN accounts AS a ON m.account_id = a.id
		WHERE m.title LIKE #{searchQuery}
		OR m.content LIKE #{searchQuery}
	</select>
	<select id="getAllMessages" resultMap="messageWithAccountResultMap">
		SELECT 
		<!--message -->
		 m.id,
		 m.title,
		 m.content,
		 m.created_at,
		 m.updated_at,
		 <!--account -->
		 a.id AS account_id,
		 a.name AS account_name,
		 a.display_name AS display_name,
		 a.authority,
		 a.created_at AS account_created_at,
		 a.updated_at AS account_updated_at
		FROM messages AS m
		JOIN accounts AS a ON m.account_id = a.id
	</select>
	<select id="getMessageIdByAccountId" resultMap="messageWithAccountResultMap">
		SELECT m.id
		FROM messages AS m
		JOIN accounts AS a ON m.account_id = a.id
		WHERE m.account_id = #{accountId} 
	</select>
	<insert id="insertMessage" parameterType="com.example.demo.entity.Message" useGeneratedKeys="true" keyProperty="message.id">
		INSERT INTO messages (
			title,
			content,
			created_at,
			updated_at,
			account_id
			)
		VALUES (
			#{message.title},
			#{message.content},
			CURRENT_TIMESTAMP,
			CURRENT_TIMESTAMP,
			#{accountId}
			)
	</insert>
	<update id="updateMessageById" parameterType="com.example.demo.entity.Message">
		UPDATE messages 
		SET title = #{title} ,
			content = #{content},
			updated_at = CURRENT_TIMESTAMP
		WHERE id = #{id}
		AND updated_at = #{updatedAt}
	</update>
	<delete id="deleteMessageById">
		DELETE FROM messages 
		WHERE id = #{id}
		AND updated_at = #{updatedAt}
	</delete>
	<delete id="deleteAllMessagesByAccountId">
		DELETE FROM messages 
		WHERE account_id = #{accountId}
	</delete>
</mapper>